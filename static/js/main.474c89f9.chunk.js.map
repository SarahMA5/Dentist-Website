{"version":3,"sources":["Home.js","Procedures.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["Home","Procedures","Contact","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAWeA,MATf,WACI,OACI,6BACI,+CACA,0DCeGC,MAnBf,WACI,OACI,6BACI,0CACA,uSACA,4BACI,gDACA,8CACA,iDACA,+CACA,qDACA,6CACA,8CCEDC,MAdf,WACI,OACI,6BACI,uCACA,qMACA,0DACA,8CAAmB,6BAAnB,sBACA,8CAAmB,6BAAnB,2BACA,0DCiBGC,MApBf,WACE,OACE,kBAAC,IAAD,KAEE,6BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,QAAyB,IACzB,kBAAC,IAAD,CAAMA,GAAG,eAAT,cAAyC,IACzC,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAGF,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOM,KAAK,cAAcC,UAAWN,IACrC,kBAAC,IAAD,CAAOK,KAAK,WAAWC,UAAWL,OCRtBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.474c89f9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            <h1>Dentist Website</h1>\r\n            <p>Welcome to my dentist app</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nfunction Procedures() {\r\n    return (\r\n        <div>\r\n            <h1>Procedures</h1>\r\n            <p>Here at Dentist Office we provide a wide variety of procedures. We accept all sorts of insurance and have competitive uninsured payment plans. Find the service you need and visit our contact page to find out how to reach out to us to make the appointment you need!</p>\r\n            <ul>\r\n                <li>General Checkups</li>\r\n                <li>Teeth Cleaning</li>\r\n                <li>Cavity Screenings</li>\r\n                <li>Cavity Fillings</li>\r\n                <li>Chipped Tooth Fixings</li>\r\n                <li>Tooth Removal</li>\r\n                <li>Root Canals</li>\r\n            </ul>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Procedures;\r\n","import React from 'react';\r\n\r\nfunction Contact() {\r\n    return (\r\n        <div>\r\n            <h1>Contact</h1>\r\n            <p>Call, email or drop by any time. We're open Monday through Friday from 9AM until 5PM. If you call during our off hours and leave a message then we'll get back to you.</p>\r\n            <p>frontdesk@dentistoffice.com</p>\r\n            <p> (800) MY-TEETH <br /> 1 (800) 698-3384 </p>\r\n            <p>123 Main Street <br /> Dental Town, USA 99555</p>\r\n            <p>Welcome to my dentist app</p>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Contact;\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Home from './Home'\nimport Procedures from './Procedures'\nimport Contact from './Contact'\n\nfunction App() {\n  return (\n    <Router>\n\n      <nav>\n        <Link to=\"/\">Home</Link>{\" \"}\n        <Link to=\"/procedures\">Procedures</Link>{\" \"}\n        <Link to=\"/contact\">Contact</Link>\n      </nav>\n\n      <div>\n        <Route exact path=\"/\" component={Home}></Route>\n        <Route path=\"/procedures\" component={Procedures}></Route>\n        <Route path=\"/contact\" component={Contact}></Route>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}